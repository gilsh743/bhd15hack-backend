{
  "openapi": "3.0.0",
  "info": {
    "description": "Our server helps out tagging STT raw segments as well as providing an interface for translation to the relevant professsionals.",
    "version": "0.1",
    "title": "Tower of Babel",
    "contact": {
      "email": "liad4231@gmail.com"
    }
  },
  "servers": [
    {
      "url": "https://babeltower/api"
    }
  ],
  "paths": {
    "/nms/document/attachment/raw/{attachment_id}": {
      "get": {
        "tags": [
          "Nemesis"
        ],
        "description": "Get **raw** attachment by its id. Note that a single nemsis document may have multiple attachments.",
        "operationId": "getRawAttachmentById",
        "parameters": [
          {
            "name": "attachment_id",
            "in": "path",
            "required": true,
            "description": "The id of the document's attachment itself.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "attachment was found successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/text_file"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/text_file"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied, currently not supported."
          },
          "404": {
            "description": "attachment was not found"
          }
        },
        "security": [
          {
            "nms_auth": []
          }
        ]
      }
    },
    "/nms/document/raw/{document_id}": {
      "get": {
        "tags": [
          "Nemesis"
        ],
        "description": "Get **raw** text by a document id. Note that this requests will combine all attachments together.",
        "operationId": "getRawDocumentById",
        "parameters": [
          {
            "name": "document_id",
            "in": "path",
            "description": "The id of the document as presented in Nemesis.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "document was found successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/text_file"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/text_file"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied, currently not supported."
          },
          "404": {
            "description": "document was not found"
          }
        },
        "security": [
          {
            "nms_auth": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "nms_auth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "nms_cookie"
      }
    },
    "schemas": {
      "text_file": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "doc_time": {
            "type": "integer"
          },
          "arrival_time": {
            "type": "integer"
          },
          "content": {
            "type": "string"
          }
        }
      },
      "translation_entry": {
        "type": "object",
        "properties": {
          "original_text": {
            "type": "string"
          },
          "translated_text": {
            "type": "string"
          }
        }
      },
      "status": {
        "type": "string",
        "description": "pet status in the store",
        "enum": [
          "available",
          "pending",
          "sold"
        ]
      }
    }
  }
}